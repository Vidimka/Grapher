package ru.vidimka;

import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.chart.LineChart;
import javafx.scene.control.*;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.shape.Rectangle;
import javafx.stage.Popup;

import org.gillius.jfxutils.chart.ChartZoomManager;
import org.gillius.jfxutils.chart.StableTicksAxis;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.net.URL;
import java.util.*;

public class ScreenController implements Initializable, EventHandler<KeyEvent>{

    private final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    private final double width = screenSize.getWidth();
    private final double height = screenSize.getHeight();
    private String equation;
    private String param;
    private String alternativeParam;
    private final EquationSolver solver = new EquationSolver();
    private final EquationEditor editor = new EquationEditor();
    private final Drawer drawer = new Drawer();
    private boolean isHelpOpened = false;

    @FXML
    private AnchorPane mainPane;
    @FXML
    private AnchorPane chartPane;
    @FXML
    private Rectangle rect;
    @FXML
    private TextField textField;
    @FXML
    private StableTicksAxis xAxis = new StableTicksAxis();
    @FXML
    private StableTicksAxis yAxis = new StableTicksAxis();
    @FXML
    private LineChart<Number, Number> lineChart = new LineChart<>(xAxis, yAxis);
    @FXML
    private Alert alert;
    @FXML
    private static TextInputDialog varRequest = new TextInputDialog();
    @FXML
    private static TextInputDialog xyRequest = new TextInputDialog();
    @FXML
    private Popup help = new Popup();

    public void onKeyPress(KeyEvent event){
        boolean isDrawn = false;
        if (event.getCode() == KeyCode.ENTER){
            equation = textField.getCharacters().toString().replace(" ", "");
            try {
                List<String> eqAndParam = editor.detectParam(equation);
                param = eqAndParam.get(0);
                equation = eqAndParam.get(1);

                if(equation.contains("x")){
                    alternativeParam = "x";
                } else if(equation.contains("y")){
                    alternativeParam = "y";
                } else{ alternativeParam = "Unidentified"; }

                ArrayList<String> varList = (ArrayList<String>) editor.detectVar(equation);
                equation = editor.shield(equation);
                varList = (ArrayList<String>) editor.checkForFunction(varList);
                Map<String, String> variableValues = editor.findVariableValue(varList);
                equation = editor.replaceVar(equation, variableValues);
                eqAndParam.remove(1);
                eqAndParam.add(1, equation);

                if(!(alternativeParam.equals("Unidentified"))){
                    ArrayList<String> minMaxStepList = throwXYRequest();
                    isDrawn = true;
                    drawer.draw(minMaxStepList, eqAndParam, lineChart);
                    if(lineChart.getData().size() > 2){
                        lineChart.getData().remove(0);
                    }
                } else{
                    double equationValue = solver.solve(equation);
                    isDrawn = true;
                    drawer.draw(equationValue, lineChart, param);
                    if(lineChart.getData().size() > 2){
                        lineChart.getData().remove(0);
                    }
                }
                if(varList.contains(param)){
                    throw new RuntimeException("The equation cannot be built or is equals to 0 all the time");
                }
            } catch(RuntimeException e){
                e.printStackTrace();
                alert.setContentText(e.getMessage());
                alert.show();
            }
            if(isDrawn){ textField.clear(); }
        }
    }

    public static String throwRequest(String variable){
        varRequest.setContentText("Please fill in the value for variable "
                                    + variable);
        Optional<String> varValue = varRequest.showAndWait();
        return varValue.orElse("Not Found");
    }

    public ArrayList<String> throwXYRequest(){
        /*
        minMaxStepList must have exactly 3 elements such as min value, max value and step (optional) in this order exactly
        and since it is generated by code it can't be wrong but be careful anyway
         */
        xyRequest.setContentText("Please fill in (format: <min>, <max>, (<step>)) the range and step for "
                                 + alternativeParam);
        Optional<String> rangeAndStep = xyRequest.showAndWait();
        String[] rangeAndStepSplit = rangeAndStep.get().replace(" ", "").split(",");
        ArrayList<String> minMaxStepList = new ArrayList<>();
        if(rangeAndStepSplit.length == 3){
            minMaxStepList.add(rangeAndStepSplit[0]); //As a min
            minMaxStepList.add(rangeAndStepSplit[1]); //As a max
            minMaxStepList.add(rangeAndStepSplit[2]); //As a step
        } else if(rangeAndStepSplit.length == 2){
            minMaxStepList.add(rangeAndStepSplit[0]); //As a min
            minMaxStepList.add(rangeAndStepSplit[1]); //As a max
            minMaxStepList.add("1"); //As a step
        } else {
            throw new RuntimeException("Wrong format of input please try again");
        }
        return minMaxStepList;
    }

    public void onButtonClick(){ mainPane.setPrefSize(width, height); }

    public void onHelpButtonClick(){
        isHelpOpened = !isHelpOpened;
        if(isHelpOpened){
            help.show(Main.stage);
        } else{ help.hide(); }
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle){
        lineChart.getHeight();
        ChartZoomManager manager = new ChartZoomManager(chartPane, rect, lineChart);
        manager.start();
        mainPane.getHeight();
        textField.getHeight();
        alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setHeaderText("An exception occurred with a message:");
        alert.setTitle("Exception alert");
        varRequest.setTitle("Value required");
        xyRequest.setTitle("Range and request required");
    }

    @Override
    public void handle(KeyEvent keyEvent){}
}
