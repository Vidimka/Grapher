package ru.vidimka;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EquationEditor{
    public static ArrayList<FuncType> funcList = new ArrayList<>();

    public List<String> detectParam(String eq){
        List<String> eqAndParam = new ArrayList<>();
        /*
        eqAndParam must contain only 2 elements:
            0) Parameter of the equation (y or x)
            1) Equation itself (begins from '=' and lasts till the end)
        For example - y=2x+z: 0) is y and 1) is 2x+z
        Since it's autogenerated with code it can't be wrong if you don't break/edit the code
         */
        if((eq.charAt(0) == 'y' || eq.charAt(0) == 'x') && eq.charAt(1) == '='){
            eqAndParam.add(eq.substring(0, 1));
            eqAndParam.add(eq.substring(2));
        } else{ throw new RuntimeException("It cant be drawn for some reason"); }
        return eqAndParam;
    }

    public List<String> detectVar(String eq){
        ArrayList<String> varList = new ArrayList<>();
        Matcher matcher = Pattern.compile("[a-zA-z]").matcher(eq);
        while(matcher.find()){ varList.add(matcher.group()); }
        varList.removeAll(List.of("x", "y", "^"));
        return varList;
    }

    public String shield(String eq){
        String shieldedEquation = eq;
        int funcCounter = 0;
        if(eq.length() > 3){
            boolean isArc = false;
            for(int i=0; i<eq.length(); ++i){
                switch(eq.charAt(i)){ // Replacing number is number of this func in FuncType starting with 1 and "arc" at 0
                    case 's':
                        if(eq.charAt(i+1) == 'i' && eq.charAt(i+2) == 'n' && eq.charAt(i+3) == '('){
                            shieldedEquation = eq.replace("sin", "{f"+funcCounter+"}");
                            if(isArc){
                                funcList.add(FuncType.ARCSIN);
                                isArc = false;
                            } else { funcList.add(FuncType.SIN); }
                            ++funcCounter;
                        } else if(eq.charAt(i+1) == 'q' && eq.charAt(i+2) == 'r' && eq.charAt(i+3) == 't'
                                && eq.charAt(i+4) == '('){
                            shieldedEquation = eq.replace("sqrt", "{f"+funcCounter+"}");
                            funcList.add(FuncType.SQRT);
                            ++funcCounter;
                        }
                        break;
                    case 'c':
                        if(eq.charAt(i+1) == 'o' && eq.charAt(i+2) == 's' && eq.charAt(i+3) == '('){
                            shieldedEquation = eq.replace("cos", "{f"+funcCounter+"}");
                            if(isArc){
                                funcList.add(FuncType.ARCCOS);
                                isArc = false;
                            } else { funcList.add(FuncType.COS); }
                            ++funcCounter;
                        } else if(eq.charAt(i+1) == 'o' && eq.charAt(i+2) == 't'){
                            if(eq.charAt(i+3) == 'a' && eq.charAt(i+4) == 'n' && eq.charAt(i+5) == '('){
                                shieldedEquation = eq.replace("cotan", "{f"+funcCounter+"}");
                                if(isArc){
                                    funcList.add(FuncType.ARCCOTAN);
                                    isArc = false;
                                } else { funcList.add(FuncType.COTAN); }
                                ++funcCounter;
                            } else if(eq.charAt(i+3) == 'g' && eq.charAt(i+4) == '('){
                                shieldedEquation = eq.replace("cotg", "{f"+funcCounter+"}");
                                if(isArc){
                                    funcList.add(FuncType.ARCCOTAN);
                                    isArc = false;
                                } else { funcList.add(FuncType.COTAN); }
                                ++funcCounter;
                            }
                        }
                        break;
                    case 't':
                        if(eq.charAt(i+1) == 'a' && eq.charAt(i+2) == 'n' && eq.charAt(i+3) == '('){
                            shieldedEquation = eq.replace("tan", "{f"+funcCounter+"}");
                            if(isArc){
                                funcList.add(FuncType.ARCTAN);
                                isArc = false;
                            } else { funcList.add(FuncType.TAN); }
                            ++funcCounter;
                        } else if(eq.charAt(i+1) == 'g' && eq.charAt(i+2) == '('){
                            shieldedEquation = eq.replace("tg", "{f"+funcCounter+"}");
                            if(isArc){
                                funcList.add(FuncType.ARCTAN);
                                isArc = false;
                            } else { funcList.add(FuncType.TAN); }
                            ++funcCounter;
                        }
                        break;
                    case 'a':
                        if(eq.charAt(i+1) == 'r' && eq.charAt(i+2) == 'c'){
                            if(eq.charAt(i+3) == 's' || eq.charAt(i+3) == 'c'
                                    || eq.charAt(i+3) == 't'){
                                isArc = true;
                                shieldedEquation = eq.replace("arc", "");
                                --i;
                            } else{
                                throw new RuntimeException("This is not an existing arc function");
                            }
                        }
                        break;
                }
                eq = shieldedEquation;
            }
        }
        return shieldedEquation;
    }

    public List<String> checkForFunction(List<String> varList){
        ReplaceableArrayList<String> tempVarList = new ReplaceableArrayList<>(varList);
        for(int i=0; i<varList.size()-2; ++i){
            switch(varList.get(i)){
                case "s":
                    if(varList.get(i+1).equals("i") && varList.get(i+2).equals("n")){
                        tempVarList.replaceRowByIndex(i, i+2, "");
                    } else if(varList.get(i+1).equals("q") && varList.get(i+2).equals("r")
                            && varList.get(i+3).equals("t")){
                        tempVarList.replaceRowByIndex(i, i+3, "");
                    }
                    break;
                case "c":
                    if(varList.get(i+1).equals("o") && varList.get(i+2).equals("s")){
                        tempVarList.replaceRowByIndex(i, i+2, "");
                    } else if(varList.get(i+1).equals("o") && varList.get(i+2).equals("t")){
                        if(varList.get(i+3).equals("a") && varList.get(i+4).equals("n")){
                            tempVarList.replaceRowByIndex(i, i+4, "");
                        } else if(varList.get(i+3).equals("g")){
                            tempVarList.replaceRowByIndex(i, i+3, "");
                        }
                    }
                    break;
                case "t":
                    if(varList.get(i+1).equals("a") && varList.get(i+2).equals("n")){
                        tempVarList.replaceRowByIndex(i, i+2, "");
                    } else if(varList.get(i+1).equals("g")){
                        tempVarList.replaceRowByIndex(i, i+1, "");
                    }
                    break;
                case "a":
                    if(varList.get(i+1).equals("r") && varList.get(i+2).equals("c")){
                        if(varList.get(i+3).equals("s") || varList.get(i+3).equals("c")
                                || varList.get(i+3).equals("t")){
                            tempVarList.replaceRowByIndex(i, i+3, "");
                        } else{ throw new RuntimeException("This is not an existing arc function"); }
                    }
                    break;
            }
        }
        tempVarList.removeAll(List.of(""));
        return tempVarList;
    }

    public Map<String, String> findVariableValue(List<String> varList){
        HashMap<String, String> variableValues = new HashMap<>();
        String currentValue;
        if(!(varList.isEmpty())){
            for(String variable : varList){
                currentValue = ScreenController.throwRequest(variable);
                if(currentValue.equals("Not Found")){ throw new RuntimeException("Please fill in the value"); }
                variableValues.put(variable, currentValue);
            }
        }
        return variableValues;
    }

    public String replaceVar(String eq, Map<String, String> variableValues){ // TODO: Fix here
        ReplaceableArrayList<String> equationArray = new ReplaceableArrayList<>(eq);
        String symbol;
        for(int i=0; i<equationArray.size(); ++i){
            symbol = equationArray.get(i);
            if(i>0 && (symbol.matches("[a-zA-Z]") && equationArray.get(i-1).matches("[0-9]"))){
                equationArray.replace(symbol, "*" + symbol);
            }
            if(variableValues.containsKey(symbol)){
                equationArray.replace(symbol, variableValues.get(symbol));
            }
        }
        return equationArray.toString();
    }
}
